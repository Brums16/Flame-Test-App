{"ast":null,"code":"var _jsxFileName = \"/home/chrisb/Coding/Personal Projects/flame-test-app/src/main.js\",\n  _s = $RefreshSig$();\nimport './styles.css';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  const [flameColorState, setFlameColorState] = useState({\n    color1: 'gold',\n    color2: 'yellow'\n  });\n  const [currentElementState, setCurrentElementState] = useState('none');\n  const [score, setScore] = useState(0);\n\n  // Note for future, setting state works a lot better as one object with 2 colors as properties, rather than changing 2 separate states onClick\n\n  const [mode, setMode] = useState('sandbox');\n  const flameColors = [{\n    name: 'Lithium',\n    symbol: 'Li',\n    color: {\n      color1: 'crimson',\n      color2: 'lightcoral'\n    }\n  }, {\n    name: 'Sodium',\n    symbol: 'Na',\n    color: {\n      color1: '#ffff00',\n      color2: '#fdfd96'\n    }\n  }, {\n    name: 'Potassium',\n    symbol: 'K',\n    color: {\n      color1: 'mediumpurple',\n      color2: 'plum'\n    }\n  }, {\n    name: 'Calcium',\n    symbol: 'Ca',\n    color: {\n      color1: 'darkorange',\n      color2: 'orange'\n    }\n  }, {\n    name: 'Copper',\n    symbol: 'Cu',\n    color: {\n      color1: 'green',\n      color2: 'lightgreen'\n    }\n  }, {\n    name: 'Selenium',\n    symbol: 'Se',\n    color: {\n      color1: 'blue',\n      color2: 'lightblue'\n    }\n  }];\n  const Button = () => {\n    return flameColors.map(element => /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"element-button\",\n      onClick: () => mode === 'sandbox' ? setFlameColorState(element.color) : checkAnswer(element.name),\n      children: element.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this));\n  };\n  const checkAnswer = name => {\n    if (name === currentElementState) {\n      setScore(score + 1);\n      setFlameColorState(flameColors[randInt].color);\n      setCurrentElementState(flameColors[randInt].name);\n    } else {\n      console.log('wrong answer');\n    }\n  };\n\n  /* calling the changeMode function makes way more sense, this way I can reset colours to default within the function, rather than just setting the state onclick\n  with an inline function when clicking the buttons.  also means I can just have one changemode function rather than two separate inline functions! */\n\n  const changeMode = () => {\n    mode === 'sandbox' ? setMode('test') : setMode('sandbox');\n    setFlameColorState({\n      color1: 'gold',\n      color2: 'yellow'\n    });\n  };\n  const newTest = () => {\n    let randInt = Math.floor(Math.random() * 6);\n    setFlameColorState(flameColors[randInt].color);\n    setCurrentElementState(flameColors[randInt].name);\n  };\n\n  // bunsen-div is being made twice for no reason so moving that to a separate component\n\n  const Bunsen = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bunsen-div\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bunsen-flame\",\n        style: {\n          backgroundColor: `${flameColorState.color1}`,\n          border: `10px solid ${flameColorState.color2}`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bunsen-tube\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this);\n  };\n  if (mode === 'sandbox') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Sandbox Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttons-grid\",\n          children: /*#__PURE__*/_jsxDEV(Button, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Bunsen, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: changeMode,\n        children: \"Test yourself\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this);\n  }\n  if (mode === 'test') {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Test Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Click the button that corresponds to the flame color...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: newTest,\n        children: \"Start!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttons-grid\",\n          children: /*#__PURE__*/_jsxDEV(Button, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Bunsen, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Current Streak: \", score]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: changeMode,\n        children: \"Switch to Sandbox mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }, this);\n  }\n};\n_s(Main, \"gsMzPuORgX0zqd/ed+V5NMHfNx4=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Main","_s","flameColorState","setFlameColorState","color1","color2","currentElementState","setCurrentElementState","score","setScore","mode","setMode","flameColors","name","symbol","color","Button","map","element","className","onClick","checkAnswer","children","fileName","_jsxFileName","lineNumber","columnNumber","randInt","console","log","changeMode","newTest","Math","floor","random","Bunsen","style","backgroundColor","border","_c","$RefreshReg$"],"sources":["/home/chrisb/Coding/Personal Projects/flame-test-app/src/main.js"],"sourcesContent":["import './styles.css'\nimport React, {useState} from 'react'\n\n\n\n\nconst Main = () => {\n\nconst [flameColorState, setFlameColorState] = useState({color1: 'gold', color2: 'yellow'}) \nconst [currentElementState, setCurrentElementState] = useState('none')\nconst [score, setScore] = useState(0)\n\n// Note for future, setting state works a lot better as one object with 2 colors as properties, rather than changing 2 separate states onClick\n\nconst [mode, setMode] = useState('sandbox')\n\n\n\n\nconst flameColors = [\n    {\n        name: 'Lithium',\n        symbol: 'Li',\n        color: {color1: 'crimson',\n                color2: 'lightcoral'}               \n    },\n    {\n        name: 'Sodium',\n        symbol: 'Na',\n        color: {color1: '#ffff00',\n                color2: '#fdfd96'}\n    },\n    {\n        name: 'Potassium',\n        symbol: 'K',\n        color: {color1: 'mediumpurple',\n                color2: 'plum'}\n    },\n    {\n        name: 'Calcium',\n        symbol: 'Ca',\n        color: {color1: 'darkorange',\n                color2: 'orange'}\n    },\n    {\n        name: 'Copper',\n        symbol: 'Cu',\n        color: {color1: 'green',\n                color2: 'lightgreen'}\n    },\n    {\n        name: 'Selenium',\n        symbol: 'Se',\n        color: {color1: 'blue',\n                color2: 'lightblue'}\n    }\n]\n\n\nconst Button = () => {\n    return (\n        flameColors.map((element) => \n        <button className=\"element-button\" \n        onClick={() => mode === 'sandbox' ? setFlameColorState(element.color) : checkAnswer(element.name)}>{element.name}</button>\n    ))\n}\n\nconst checkAnswer = (name) => {\n    if (name === currentElementState){\n        setScore(score+1)\n        setFlameColorState(flameColors[randInt].color)\n        setCurrentElementState(flameColors[randInt].name)\n    }\n    else {\n        console.log('wrong answer')\n    }\n}   \n\n/* calling the changeMode function makes way more sense, this way I can reset colours to default within the function, rather than just setting the state onclick\nwith an inline function when clicking the buttons.  also means I can just have one changemode function rather than two separate inline functions! */\n\nconst changeMode = () => {\n    mode === 'sandbox' ? setMode('test') : setMode('sandbox')\n    setFlameColorState({color1: 'gold', color2: 'yellow'})\n}\n\nconst newTest = () => {\n    let randInt = Math.floor(Math.random()*6)\n    setFlameColorState(flameColors[randInt].color)\n    setCurrentElementState(flameColors[randInt].name)\n}\n\n// bunsen-div is being made twice for no reason so moving that to a separate component\n\nconst Bunsen = () => {\n    return (\n        <div className=\"bunsen-div\">\n                <div className=\"bunsen-flame\" style={{backgroundColor: `${flameColorState.color1}`, border: `10px solid ${flameColorState.color2}`}}>\n                </div>\n                <div className = \"bunsen-tube\">\n                \n                </div>\n            </div>\n    )\n}\n\n\n\nif (mode === 'sandbox'){\n    return (\n        <div className = 'main'>\n            <h2>Sandbox Mode</h2>\n        <div className=\"main-grid\">\n            <div className=\"buttons-grid\">\n            <Button />\n            </div>\n            <Bunsen />\n\n        </div>\n        \n        <button onClick={changeMode}>Test yourself</button>\n\n        </div>\n    )}\n\nif (mode === 'test'){\n    return (\n        <div className = 'main'>\n            <h2>Test Mode</h2>\n            <p>Click the button that corresponds to the flame color...</p>\n            <button onClick={newTest}>Start!</button>\n            <div className =\"main-grid\">\n            <div className =\"buttons-grid\">\n            <Button />\n            </div>\n            <Bunsen />\n\n            </div>\n            <p>Current Streak: {score}</p>\n            <button onClick={changeMode}>Switch to Sandbox mode</button>\n        </div>\n        \n    )}\n\n}\n\nexport default Main"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}